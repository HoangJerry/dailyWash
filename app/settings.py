# -*- coding: utf-8 -*-
"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from collections import OrderedDict
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'viqz@6ai9oxv&-mz_!g7a)9)aa-avgfqk$=hdswlzhaal+u4uj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*',]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    'rest_framework',
    'rest_framework.authtoken',
    'constance',
    'corsheaders',

    'unify_django',
    'django_crontab',
    
    'api',

]


CONSTANCE_CONFIG = OrderedDict([ 
    ('THE_FREE_CREDITS_GIVEN', (2, _('Number of free credits given for new user'), int)),
    ('REWARD_VALUE', (5, _('Reward value'), float)),
    ('REFERRAL_SMS', ('Join me on One Dollar and get $5 to spend. Use my referral link to download the app: ###url###', _('Referral SMS, please keep the placeholder "###url###" which will be replace with the referral URL'))),
    ('QUOTE_10', ('', _('Quote #10'))),
    ('STRIPE_ERROR_MSG_RISKY', ('Stripe blocked this card as too risky', '')),
    ('SHARE_YOUR_IDEA', (False, 'Checked to display share your idea reward', bool)),
    ('INSTALL_APPS_REWARD', (15, u'Reward for install app (Â¢)', int)),
])

CONSTANCE_CONFIG_FIELDSETS = {
    'General Options': ( 'THE_FREE_CREDITS_GIVEN','REWARD_VALUE',
                        'REFERRAL_SMS','QUOTE_10',),
    'Game Config': ('STRIPE_ERROR_MSG_RISKY', 'SHARE_YOUR_IDEA', 'INSTALL_APPS_REWARD',),
}



MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)
CORS_ORIGIN_ALLOW_ALL = True # Allow Corsheaders

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'static')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
TEMPLATES_DIRS =(os.path.join(BASE_DIR,'templates','static'))
WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',
    'PAGE_SIZE': 10,
    'PAGINATE_BY': 10,  # Default to 10
    'PAGINATE_BY_PARAM': 'page_size',  # Allow client to override, using `?page_size=xxx`.
    'MAX_PAGINATE_BY': 100  # Maximum limit allowed when using `?page_size=xxx`.
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# APPEND_SLASH = False # if want to be direct link

# SITE_URL = 'http://localhost:1234/'

# STATIC_URL = SITE_URL + 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# MEDIA_URL = SITE_URL + 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

AUTH_USER_MODEL = 'api.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

DEBUG = True

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dailywash$default',               
        'USER': 'dailywash',
        'PASSWORD': 'coca123@',
        'HOST': 'dailywash.mysql.pythonanywhere-services.com',
        'PORT': '',                     
    }
}

MEDIA_ROOT = u'/home/dailywash/dailyWash/media'
MEDIA_URL = '/media/'
STATIC_ROOT = u'/home/dailywash/dailyWash/static'
STATIC_URL = '/static/'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/home/dailywash/dailyWash/cron_error.log',
            },
        },
    'loggers': {
        'django_crontab': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

try:
    from settings_local import *
except ImportError as e:
    print (e)

